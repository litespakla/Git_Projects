'''
Triangle, pentagonal, and hexagonal numbers are generated by the
following formulae:

Triangle	 	Tn=n(n+1)/2	 	1, 3, 6, 10, 15, ...
Pentagonal	 	Pn=n(3n−1)/2	 	1, 5, 12, 22, 35, ...
Hexagonal	 	Hn=n(2n−1)	 	1, 6, 15, 28, 45, ...

It can be verified that T285 = P165 = H143 = 40755.

Find the next triangle number that is also pentagonal and hexagonal.
'''

def numbers(k):
    #Try to find D within the first 100 numbers
    limit=100
    #Number of iterations until we get the solution
    i=0
    hexagonals = [int(n*(2*n-1)) for n in range(1+limit*i,limit*(i+1))]
    triangulars=[1]
    pentagonals=[1]
    #nth triangular and pentagonal number
    n=1
    #Counts how many numbers so far are of the three types
    count=0
    while True:
        #Get all pentagonal and triangular numbers up until the hexagonal number tested
        while hexagonals[-1]>=triangulars[-1]:
            n+=1
            triangulars.append(int(n*(n+1)/2))
            pentagonals.append(int(n*(3*n-1)/2))
        #For every hexagonal number check if it's also pentagonal and triangular
        for j in range(len(hexagonals)):
            hex=hexagonals.pop()
            if hex in triangulars and hex in pentagonals:
                #Counts how many numbers so far are of the three types
                count+=1
                if count==k:
                    return hex
        #If the number wasn't found, iterate again
        i+=1
        hexagonals = [int(n*(2*n-1)) for n in range(limit*i,limit*(i+1))]

#0 and 40755 are of the three types, so we have to find the third one
print(numbers(3))
