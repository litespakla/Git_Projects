'''
Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers 
are all figurate (polygonal) numbers and are generated by the following formulae:

Triangle	 	
Square	 	
Pentagonal	 	
Hexagonal	 	
Heptagonal	 	
Octagonal	 	
 	
The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three interesting properties.

1. The set is cyclic, in that the last two digits of each number is the first two digits 
of the next number (including the last number with the first).
2. Each polygonal type: triangle (8128), square (8281), and pentagonal (2882), 
is represented by a different number in the set.
3. This is the only set of 4-digit numbers with this property.

Find the sum of the only ordered set of six cyclic 4-digit numbers for which each polygonal type: 
triangle, square, pentagonal, hexagonal, heptagonal, and octagonal, is represented by a 
different number in the set.
'''

import itertools

def triangle(n):
    return int(n*(n+1)/2)

def square(n):
    return n*n

def pentagonal(n):
    return int(n*(3*n-1)/2)

def hexagonal(n):
    return int(n*(2*n-1))

def heptagonal(n):
    return int(n*(5*n-3)/2)

def octogonal(n):
    return int(n*(3*n-2))

ntri=[]
nsqr=[]
npen=[]
nhex=[]
nhep=[]
noct=[]
i=1

while triangle(i)<10000:
    a=triangle(i)
    b=square(i)
    c=pentagonal(i)
    d=hexagonal(i)
    e=heptagonal(i)
    f=octogonal(i)

    if 999<a < 10000:
        ntri.append(str(a))
    if 999<b < 10000:
        nsqr.append(str(b))
    if 999<c < 10000:
        npen.append(str(c))
    if 999<d < 10000:
        nhex.append(str(d))
    if 999<e < 10000:
        nhep.append(str(e))
    if 999<f < 10000:
        noct.append(str(f))

    i+=1

# Creating a list of lists
numbers = [ntri, nsqr, npen, nhex, nhep, noct]

# Generating all permutations
for perm in itertools.permutations(numbers):
    tri, sqr, pen, hex, hep, oct = perm

    c0=[]
    for c in tri:
        sq=[]
        for i in range(len(sqr)):
            if sqr[i][:2]==c[2:] and sqr[i] not in c:
                s=(sqr[i], c)
                sq.append(s)
        if len(sq)>0:
            for s in sq:
                c0.append(s)
    c1=[]
    for c in c0:
        pe=[]
        for i in range(len(pen)):
            if pen[i][:2]==c[0][2:] and pen[i] not in c:
                s=(pen[i],)+c
                pe.append(s)
        if len(pe)>0:
            for s in pe:
                c1.append(s)
    c2=[]
    for c in c1:
        he=[]
        for i in range(len(hex)):
            if hex[i][:2]==c[0][2:] and hex[i] not in c:
                s=(hex[i],)+c
                he.append(s)
        if len(he)>0:
            for s in he:
                c2.append(s)
    c3=[]
    for c in c2:
        hp=[]
        for i in range(len(hep)):
            if hep[i][:2]==c[0][2:] and hep[i] not in c:
                s=(hep[i],)+c
                hp.append(s)
        if len(hp)>0:
            for s in hp:
                c3.append(s)
    c4=[]
    for c in c3:
        oc=[]
        for i in range(len(oct)):
            if oct[i][:2]==c[0][2:] and oct[i] not in c:
                s=(oct[i],)+c
                oc.append(s)
        if len(oc)>0:
            for s in oc:
                if s[0][2:]==s[-1][:2]:
                    c4.append(s)
    if len(c4)!=0:
        for i in c4:
            print(i, sum(int(j) for j in i))
        break