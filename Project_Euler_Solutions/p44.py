'''
Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2.
The first ten pentagonal numbers are:

1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

It can be seen that P4 + P7 = 22 + 70 = 92 = P8.
However, their difference, 70 − 22 = 48, is not pentagonal.

Find the pair of pentagonal numbers, Pj and Pk,
for which their sum and difference are pentagonal and D = |Pk − Pj|
is minimised; what is the value of D?
'''

import itertools

def pentagonal_min():
    #Try to find D within the first 100 numbers
    limit=100
    #Number of iterations until we get the solution
    i=0
    pentagonals = {int(n*(3*n-1)/2) for n in range(1+limit*i,limit*(i+1))}
    while True:
        #For every combination of 2 pentagonals, check if the sum and rest are pentagonal
        for j,k in itertools.combinations(pentagonals,2):
            if k-j in pentagonals and j+k in pentagonals:
                return k-j
        i+=1
        pentagonals.update({int(n*(3*n-1)/2) for n in range(limit*i,limit*(i+1))})

print(pentagonal_min())
